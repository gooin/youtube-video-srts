1
00:00:00,000 --> 00:00:01,680
well that was our tool chain from last week
这是我们上周的工具链

2
00:00:01,680 --> 00:00:06,720
this week is different javascript
这周是不一样的的 javascript

3
00:00:07,279 --> 00:00:08,960
let me just put this
让我把它放一下

4
00:00:08,960 --> 00:00:11,040
i have a three production already
我已经有三个产品已经

5
00:00:11,040 --> 00:00:13,759
just named after me, four
以我的名字命名了, 是四个

6
00:00:14,400 --> 00:00:18,560
my job is to keep our code running
我的工作是保持我们的代码运行

7
00:00:18,560 --> 00:00:21,520
while other packages are changing theirs
而其他软件包正在改变他们的代码。

8
00:00:21,520 --> 00:00:23,680
should you learn javascript nope 
你应该学习javascript吗 算了吧

9
00:00:23,680 --> 00:00:25,920
is there any other option ? no 
有没有其他选择？ 没有

10
00:00:25,920 --> 00:00:27,920
oh look another library was added today to patch
看， 今天又增加了一个库

11
00:00:27,920 --> 00:00:30,160
the problems of the other 150 that were also released
以修补其他150个已发布库的问题

12
00:00:30,160 --> 00:00:31,679
did you know javascript
你知道javascript

13
00:00:31,679 --> 00:00:33,440
was actually written in seven days
实际上是在 7 天内编写的

14
00:00:33,440 --> 00:00:35,280
such a messy language i love it
这样一种混乱的语言，我喜欢它

15
00:00:35,280 --> 00:00:37,360
did you know javascript was actually not written in seven days 
你知道javascript实际上不是用七天写成的吗

16
00:00:37,360 --> 00:00:39,840
no one ever knows what value
没有人知道，变量是什么值

17
00:00:39,840 --> 00:00:42,000
variable is or what its type is,  now we use typescript 
或者它的类型是什么, 现在我们在用typescript

18
00:00:42,000 --> 00:00:43,920
we still don't know 
我们还是不知道 

19
00:00:43,920 --> 00:00:46,079
i'd rather use rust or webassembly
我宁愿使用rust或webassembly 

20
00:00:46,079 --> 00:00:47,600
they say adoption is coming
他们说 adoption(没听懂) 就要来了

21
00:00:47,600 --> 00:00:49,280
they said that 10 years ago
他们10年前就这么说了

22
00:00:49,280 --> 00:00:50,719
they say that every year but this year is different
他们每年都这么说 但今年不同

23
00:00:50,719 --> 00:00:52,879
is it scalable no 
是否具有可扩展性 没有

24
00:00:52,879 --> 00:00:55,680
is it maintainable no is it portable
是否可以维护 不行 是否具有可移植性 

25
00:00:55,680 --> 00:00:57,600
not really yeah we use react we actually
并非如此 我们用 React, 我们实际上

26
00:00:57,600 --> 00:00:59,920
use Preact we actually use svelte
用 Preact ,我们实际上使用 svelte 

27
00:00:59,920 --> 00:01:02,559
we actually went back to vanilla javascript
我们最终回到了原生 javascript

28
00:01:02,559 --> 00:01:04,400
yeah we're using a library for this that
是的，我们为此使用了一个库

29
00:01:04,400 --> 00:01:06,320
we rewrote to vanilla javascript 
我们将其重写为原生 javascript 

30
00:01:06,320 --> 00:01:07,840
because it wasn't efficient we're stuck with
因为它效率不高，我们被

31
00:01:07,840 --> 00:01:09,920
this messy language
这种混乱的语言困住了

32
00:01:09,920 --> 00:01:12,799
now i love it javascript yeah 
现在我爱它 javascript

33
00:01:12,799 --> 00:01:14,159
it's the defacto standard do you know there's a
这是事实上的标准，你知道有一个

34
00:01:14,159 --> 00:01:16,240
library for that i wouldn't trust the
库可以做那个吗 我应该不相信的

35
00:01:16,240 --> 00:01:18,080
let's say finance application with
假设财务应用程序使用

36
00:01:18,080 --> 00:01:20,240
javascript what our finance application
javascript 我们的财务应用程序

37
00:01:20,240 --> 00:01:23,040
does is totally fine to use javascript
所做的事情完全可以使用 javascript

38
00:01:23,040 --> 00:01:25,119
but i'd recommend using typescript not that we do 
但我建议使用 typescript 而不是我们所做的那样

39
00:01:25,119 --> 00:01:27,520
we had callback hell
我们有回调地狱

40
00:01:27,520 --> 00:01:30,079
and then we went to promises 
然后我们转向了promises 

41
00:01:30,079 --> 00:01:32,000
await came out went back to promises and now we
await来了 然后我们回到了promises 现在我们

42
00:01:32,000 --> 00:01:33,600
rewrote everything back to callbacks
又重写了所有的东西回到了回调

43
00:01:33,600 --> 00:01:36,079
because it's just more comfortable
只是因为它写起来更舒服

44
00:01:36,079 --> 00:01:37,759
at least you know it's bad
至少你知道它不怎么样

45
00:01:37,759 --> 00:01:40,000
oh it's probably just a quick fix 
它可能只是一个quick fix

46
00:01:40,000 --> 00:01:42,399
will take me three to five days to find it 
我们花了三到五天才找到它

47
00:01:42,399 --> 00:01:44,960
we tried coffeescript rewrote our codebase 
我们尝试了coffeescript 重写了我们的代码库

48
00:01:44,960 --> 00:01:46,960
try typescript rewrote our codebase and then
我们尝试了typescript 重写了我们的代码库

49
00:01:46,960 --> 00:01:48,640
we went back to vanilla javascript
然后我们回到了原生 javascript

50
00:01:48,640 --> 00:01:50,320
because it's just more comfortable so we
因为它只是更舒服，所以我们

51
00:01:50,320 --> 00:01:52,399
rewrote our codebase again yeah 
重写了我们的代码库

52
00:01:52,399 --> 00:01:55,360
we used react and then react 16.8 came out and
我们先是在用 react 然后 react 16.8 出来了，

53
00:01:55,360 --> 00:01:57,200
we had to rewrite everything to hooks
我们必须得用 hooks 重写

54
00:01:57,200 --> 00:01:59,439
react 17 came out we had to rewrite everything again 
react 17 出来了，我们不得不再次重写

55
00:01:59,439 --> 00:02:01,360
and then react script
然后 react script

56
00:02:01,360 --> 00:02:03,840
was updated to version 0.4 
脚本更新到版本 0.4

57
00:02:03,840 --> 00:02:05,520
and we had to fix everything
我们必须修复一大堆东西

58
00:02:05,520 --> 00:02:08,160
to work with local images and 
来使用本地图片

59
00:02:08,160 --> 00:02:10,479
now react version 18 is coming out 
现在 react 18 出来了

60
00:02:10,479 --> 00:02:12,400
we'll rewrite everything again 
我们不得不再次重写

61
00:02:12,400 --> 00:02:15,200
we rewrote our code base around nine times this month yeah
在这个月我们重写了9次我们的代码库

62
00:02:15,200 --> 00:02:17,280
you can use redux totally fine but but
你可以使用 redux 完全没问题，但

63
00:02:17,280 --> 00:02:18,959
if you're on it i'd recommend you use
如果你在使用它，我建议你使用

64
00:02:18,959 --> 00:02:20,640
redux toolkit but actually it's better
redux toolkit 但实际上

65
00:02:20,640 --> 00:02:23,360
to use flux or Flummox or flexible?(没听懂) 
最好使用flux或Flummox 或 mobx,zustand,jotai,valtio (up加的)

66
00:02:23,360 --> 00:02:25,520
actually better to use Recoil not that
实际上更好地使用 Recoil 而不是

67
00:02:25,520 --> 00:02:27,520
we do but now react came out with the
我们这样做，但现在 react 自带有

68
00:02:27,520 --> 00:02:29,599
hooks and context api which apparently
hooks 和 context api 这显然

69
00:02:29,599 --> 00:02:31,599
is better than redux apparently we'll
比 redux 更好，显然我们会

70
00:02:31,599 --> 00:02:33,280
rewrite everything again 
再次重写全部

71
00:02:33,280 --> 00:02:35,519
sometimes it just doesn't transpire 
有时候它不会触发

72
00:02:35,519 --> 00:02:37,440
we usually rewrite our code base 
我们通常重写我们的代码库

73
00:02:37,440 --> 00:02:40,080
now we actually wrote a custom transpiler to transpile transpiler
现在我们实际上编写了一个自定义的转译器来转译转译器

74
00:02:40,080 --> 00:02:42,400
it's such a messy language 
它是如此混乱的语言

75
00:02:42,400 --> 00:02:45,040
we use it for our website desktop app
我们将它用于我们的网站、桌面应用、

76
00:02:45,040 --> 00:02:47,680
mobile app for the fridge the tesla
手机软件、冰箱、特斯拉

77
00:02:47,680 --> 00:02:49,519
it's not actually native 
实际上并不是原生

78
00:02:49,519 --> 00:02:52,000
i mean it is actually native but it's sort of not
我的意思是他实际上是原生的但它不是

79
00:02:52,000 --> 00:02:53,920
really native it's sort of hybrid native
真正的原生它是一种混合原生

80
00:02:53,920 --> 00:02:56,319
but some of it is native i mean some
但是有一部分是原生的，我的意思是有些

81
00:02:56,319 --> 00:02:58,400
people use it in a native way
人以原生方式使用它

82
00:02:58,400 --> 00:03:00,400
but we don't really use it in a native way 
但我们并没有真正以原生方式使用它

83
00:03:00,400 --> 00:03:01,680
technically a lot of people are
从技术上讲，很多人正在

84
00:03:01,680 --> 00:03:03,040
switching back to native
切换回原生

85
00:03:03,040 --> 00:03:04,879
no one has switched yet 
但现在还没有人转换回去

86
00:03:04,879 --> 00:03:06,800
Angular? talk to me when you use Angular 2 or react
Angular? 当你使用 Angular 2 或 react 的时候，再跟我说吧

87
00:03:06,800 --> 00:03:10,000
npm is such a bad package manager
npm 是一个糟糕的包管理器，

88
00:03:10,000 --> 00:03:12,080
no one uses that anymore npm is such a
没有人再用它了 npm 是一个

89
00:03:12,080 --> 00:03:13,920
good package manager how many languages have one
很好的包管理器，有多少种语言有一个，

90
00:03:13,920 --> 00:03:15,920
so that major version breaks
所以主要版本破坏

91
00:03:15,920 --> 00:03:18,080
our code but our code breaks the minor
了我们的代码，但我们的代码破坏了次要

92
00:03:18,080 --> 00:03:19,840
version i still don't know how to fix
版本，直到今天我仍然不知道如何修复

93
00:03:19,840 --> 00:03:22,959
peer dependencies until this day
peer dependencies

94
00:03:22,959 --> 00:03:26,480
yarn pnpm turbo would make sense right
yarn pnpm turbo 才有意义，对

95
00:03:26,480 --> 00:03:29,040
javascript doesn't think so 
javascript 不这么认为 

96
00:03:29,040 --> 00:03:30,879
jquery? what are you five
jquery? 你5岁吗

97
00:03:30,879 --> 00:03:33,760
we use jj query global variables
我们用 jjquery(没听懂) 全局变量

98
00:03:33,760 --> 00:03:36,319
no one uses them it must be somewhere in the window 
没有人使用它它必然在window对象的某个地方

99
00:03:36,319 --> 00:03:38,319
how do you debug node apps
你是怎么调试node应用的

100
00:03:38,319 --> 00:03:40,080
you don't you just write good code 
你不行的，你只能把代码写好

101
00:03:40,080 --> 00:03:42,239
in javascript no one ever masters javascript
在 javascript 中没有人精通javascript

102
00:03:42,239 --> 00:03:44,239
i get a hundred thousand
在stack overflow 上

103
00:03:44,239 --> 00:03:46,080
points in stack overflow
我获得了 10 万分 

104
00:03:46,080 --> 00:03:48,799
i'm still a noob node is technically multi-threaded
我仍然是一个菜鸟， node 在技术上是多线程的

105
00:03:48,799 --> 00:03:51,280
javascript is technically performant 
javascript 在技术上是高性能的 

106
00:03:51,280 --> 00:03:52,480
our code
我们的代码

107
00:03:52,480 --> 00:03:54,319
is never safe when they'll blow up
在炸了的时候永远不安全

108
00:03:54,319 --> 00:03:55,840
probably won't work anymore 
可能不再起作用 

109
00:03:55,840 --> 00:03:58,239
probably will be using rust or webassembly or whatever js
可能会使用 rust 或 webassembly 或

110
00:03:58,239 --> 00:04:00,720
an array is technically
数组在技术上是

111
00:04:00,720 --> 00:04:03,280
just an object, object is object
只是一个对象, 对象是对象 

112
00:04:03,280 --> 00:04:05,680
null is technically not an object
null 在技术上不是一个对象

113
00:04:05,680 --> 00:04:09,519
 but objects can be null so they technically can be
但对象可以是null 因此它们在技术上也可以是

114
00:04:09,519 --> 00:04:11,680
non-object unless they're an object
非对象，除非它们是对象

115
00:04:11,680 --> 00:04:14,159
right so technically null is an object
对的，所以从技术上讲 null 是一个对象，

116
00:04:14,159 --> 00:04:15,120
yes
是的

117
00:04:15,120 --> 00:04:17,120
it's a bit hacky i admit
我承认它有点魔法

118
00:04:17,120 --> 00:04:19,519
but javascript is by design 
但是 javascript 是设计使然

119
00:04:19,519 --> 00:04:21,919
is it easy to learn
它很容易学习?

120
00:04:22,079 --> 00:04:24,080
have you tried javascript 
你有尝试过 javascript 吗

121
00:04:24,080 --> 00:04:26,160
probably will be a bit hacky 
可能会有点 hacky 

122
00:04:26,160 --> 00:04:28,000
have you used javascript before? i don't recommend 
你之前用过 javascript 吗？ 我不推荐

123
00:04:28,000 --> 00:04:30,479
i don't like our tool chain documentation
我不喜欢我们的工具链文档

124
00:04:30,479 --> 00:04:32,320
and another advantage is that it's free
另一个优点是它是免费的

125
00:04:32,320 --> 00:04:34,000
so was java before it was bought byoracle
Java 在被 oracle 购买之前也是免费的，

126
00:04:34,000 --> 00:04:35,759


127
00:04:35,759 --> 00:04:37,440
so we prepare ourselves by installing
所以我们从npm安装模块

128
00:04:37,440 --> 00:04:39,919
modules from npm then we compile it to
为自己做准备 ，然后我们将其编译为

129
00:04:39,919 --> 00:04:42,240
typescript then we use a term compiler
typescript，然后我们使用一个名为 babel 的编译器

130
00:04:42,240 --> 00:04:45,040
called babel to transpile it to es5
将其转换为 es5

131
00:04:45,040 --> 00:04:47,120
load it with system.js file for
然后用 system.js 加载它的编译结果

132
00:04:47,120 --> 00:04:49,600
bankruptcy bundle it all up with webpack
用 webpack 把它全部打包

133
00:04:49,600 --> 00:04:52,240
use it in a framework like react 
在诸如 react 之类的框架中使用它

134
00:04:52,240 --> 00:04:54,800
and let the state be managed by redux or flux
并让状态由 redux 或

135
00:04:54,800 --> 00:04:57,280
Flummox or flexible or recoil or
Flummox 或 flexible 或者 recoil 或

136
00:04:57,280 --> 00:05:00,080
whatever js and voila(没听懂)
其他的什么 js 管理  mobx,zustand,jotai,valtio (up加的)

137
00:05:00,080 --> 00:05:02,479
all of this just to avoid using jquery
瞧 所有这些只是为了避免使用 jquery

138
00:05:02,479 --> 00:05:04,639
or in our case jjquery but that'll be
或在我们的例子中是 jjquery(没听懂) 但这

139
00:05:04,639 --> 00:05:06,479
probably less performant
可能会降低性能，

140
00:05:06,479 --> 00:05:08,240
as most of the things this isn't our
因为大多数事情这不是我们的

141
00:05:08,240 --> 00:05:10,080
production code it will be tomorrow
产品代码，明天

142
00:05:10,080 --> 00:05:12,800
though probably gonna get fired again
可能会再次被抛弃，

143
00:05:12,800 --> 00:05:14,479
i mean there's really no alternative to
我的意思是对于javascript

144
00:05:14,479 --> 00:05:16,479
javascript right now 
到现在真的别无选择

145
00:05:16,479 --> 00:05:18,240
defacto no one really knows what the value is until we
实际上，直到我们碰到error之前

146
00:05:18,240 --> 00:05:19,600
get an error
没人真正知道某个值具体是什么

147
00:05:19,600 --> 00:05:21,600
i love it we're try writing anything
我爱它 我们现在尝试在

148
00:05:21,600 --> 00:05:24,400
without javascript nowadays 
没有 javascript 的情况下编写一些东西
149
00:05:24,400 --> 00:05:25,759
javascript i love it
javascript 我爱它 

150
00:05:25,759 --> 00:05:29,759
no i don't recommend it
不，我不推荐它

